generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client-items"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = "postgresql://prisma.qugdnavujrpjlflpxotj:connection_to_database@aws-0-eu-north-1.pooler.supabase.com:6543/postgres?pgbouncer=true&search_path=items_d"
  directUrl = "postgresql://prisma.qugdnavujrpjlflpxotj:connection_to_database@aws-0-eu-north-1.pooler.supabase.com:5432/postgres?search_path=items_d"
  schemas   = ["items_d", "user_d"]
}

model favorites {
  favorite_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  item_id     String    @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  items       items     @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("items_d")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model items {
  item_id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String                @db.Uuid
  title               String                @db.VarChar(255)
  description         String?
  media_url           String?
  category            String?
  price               Decimal?              @db.Decimal(10, 2)
  monetization_type   String?
  availability        Boolean?              @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  favorites           favorites[]
  users               users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  monetization        monetization[]
  pay_per_view_access pay_per_view_access[]
  reviews             reviews[]
  transactions        transactions[]

  @@schema("items_d")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model monetization {
  monetization_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  item_id         String    @db.Uuid
  type            String?
  price           Decimal?  @db.Decimal(10, 2)
  currency        String?   @default("USD") @db.VarChar(10)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  items           items     @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("items_d")
}

model pay_per_view_access {
  access_id     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  item_id       String    @db.Uuid
  access_expiry DateTime  @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  items         items     @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: NoAction)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("items_d")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  item_id     String    @db.Uuid
  rating      Int?
  review_text String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  items       items     @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("items_d")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  transaction_id   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyer_id         String    @db.Uuid
  item_id          String    @db.Uuid
  amount           Decimal   @db.Decimal(10, 2)
  payment_status   String?   @default("pending")
  transaction_date DateTime? @default(now()) @db.Timestamp(6)
  users            users     @relation(fields: [buyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items            items     @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("items_d")
}

model password_reset_tokens {
  token      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  used       Boolean? @default(false)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_analytics {
  user_id         String    @id @db.Uuid
  posts_count     Int?      @default(0)
  likes_received  Int?      @default(0)
  followers_count Int?      @default(0)
  following_count Int?      @default(0)
  last_login      DateTime? @db.Timestamp(6)
  activity_score  Decimal?  @default(0.00) @db.Decimal(5, 2)
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_audit_logs {
  audit_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?  @db.Uuid
  action_type  String
  details      Json?    @default("{}")
  performed_by String?  @db.Uuid
  event_time   DateTime @default(now()) @db.Timestamp(6)
  users        users?   @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@schema("user_d")
}

model user_blocklist {
  block_id                               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                String?  @unique @db.Uuid
  reason                                 String
  blocked_by                             String?  @db.Uuid
  blocked_at                             DateTime @default(now()) @db.Timestamp(6)
  users_user_blocklist_blocked_byTousers users?   @relation("user_blocklist_blocked_byTousers", fields: [blocked_by], references: [id], onUpdate: NoAction)
  users_user_blocklist_user_idTousers    users?   @relation("user_blocklist_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_certificates {
  user_id     String   @id @db.Uuid
  public_key  String
  certificate String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_profile {
  user_id      String   @id @db.Uuid
  username     String   @unique @db.VarChar(50)
  display_name String?  @db.VarChar(100)
  bio          String?
  avatar_url   String?
  website      String?
  social_links Json?    @default("{}")
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_security {
  user_id            String    @id @db.Uuid
  failed_attempts    Int?      @default(0)
  last_failed_login  DateTime? @db.Timestamp(6)
  two_factor_enabled Boolean?  @default(false)
  otp_code           String?
  otp_expires_at     DateTime? @db.Timestamp(6)
  recovery_codes     String[]
  updated_at         DateTime  @default(now()) @db.Timestamp(6)
  users              users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_sessions {
  session_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  token      String
  created_at DateTime @default(now()) @db.Timestamp(6)
  expires_at DateTime @db.Timestamp(6)
  is_revoked Boolean? @default(false)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model users {
  id                                              String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                           String                  @unique
  phone                                           String?                 @unique
  password_hash                                   String
  role                                            String?                 @default("user") @db.VarChar(20)
  created_at                                      DateTime                @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime                @default(now()) @db.Timestamp(6)
  is_verified                                     Boolean?                @default(false)
  is_active                                       Boolean?                @default(true)
  favorites                                       favorites[]
  items                                           items[]
  pay_per_view_access                             pay_per_view_access[]
  reviews                                         reviews[]
  transactions                                    transactions[]
  password_reset_tokens                           password_reset_tokens[]
  user_analytics                                  user_analytics?
  user_audit_logs                                 user_audit_logs[]
  user_blocklist_user_blocklist_blocked_byTousers user_blocklist[]        @relation("user_blocklist_blocked_byTousers")
  user_blocklist_user_blocklist_user_idTousers    user_blocklist?         @relation("user_blocklist_user_idTousers")
  user_certificates                               user_certificates?
  user_profile                                    user_profile?
  user_security                                   user_security?
  user_sessions                                   user_sessions[]

  @@schema("user_d")
}
