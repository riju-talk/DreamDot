generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                                                 Int                      @id @default(autoincrement())
  username                                           String                   @unique @db.VarChar(50)
  email                                              String                   @unique @db.VarChar(255)
  password                                           String                   @db.VarChar(255)
  bio                                                String?
  profile_picture                                    String?                  @db.VarChar(255)
  created_at                                         DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at                                         DateTime                 @default(now()) @db.Timestamptz(6)
  blocks_blocks_blocked_idTousers                    blocks[]                 @relation("blocks_blocked_idTousers")
  blocks_blocks_blocker_idTousers                    blocks[]                 @relation("blocks_blocker_idTousers")
  direct_messages_direct_messages_receiver_idTousers direct_messages[]        @relation("direct_messages_receiver_idTousers")
  direct_messages_direct_messages_sender_idTousers   direct_messages[]        @relation("direct_messages_sender_idTousers")
  follow_follow_followee_idTousers                   follow[]                 @relation("follow_followee_idTousers")
  follow_follow_follower_idTousers                   follow[]                 @relation("follow_follower_idTousers")
  friend_friend_user1_idTousers                      friend[]                 @relation("friend_user1_idTousers")
  friend_friend_user2_idTousers                      friend[]                 @relation("friend_user2_idTousers")
  posts                                              posts[]
  user_group_memberships                             user_group_memberships[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model blocks {
  blocker_id                     Int
  blocked_id                     Int
  created_at                     DateTime @default(now()) @db.Timestamptz(6)
  users_blocks_blocked_idTousers users    @relation("blocks_blocked_idTousers", fields: [blocked_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_blocks_blocker_idTousers users    @relation("blocks_blocker_idTousers", fields: [blocker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([blocker_id, blocked_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model direct_messages {
  id                                       Int      @id @default(autoincrement())
  sender_id                                Int
  receiver_id                              Int
  message                                  String
  created_at                               DateTime @default(now()) @db.Timestamptz(6)
  users_direct_messages_receiver_idTousers users    @relation("direct_messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_direct_messages_sender_idTousers   users    @relation("direct_messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model follow {
  follower_id                     Int
  followee_id                     Int
  created_at                      DateTime @default(now()) @db.Timestamptz(6)
  users_follow_followee_idTousers users    @relation("follow_followee_idTousers", fields: [followee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follow_follower_idTousers users    @relation("follow_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([follower_id, followee_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model friend {
  user1_id                     Int
  user2_id                     Int
  created_at                   DateTime @default(now()) @db.Timestamptz(6)
  users_friend_user1_idTousers users    @relation("friend_user1_idTousers", fields: [user1_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_friend_user2_idTousers users    @relation("friend_user2_idTousers", fields: [user2_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user1_id, user2_id])
}

model groups {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(100)
  description            String?
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  user_group_memberships user_group_memberships[]
}

model posts {
  id          Int      @id @default(autoincrement())
  user_id     Int
  content_ref String   @db.VarChar(255)
  caption     String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  text_post   Boolean? @default(false)
  image_post  Boolean? @default(false)
  video_post  Boolean? @default(false)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_group_memberships {
  user_id   Int
  group_id  Int
  role      String   @default("member") @db.VarChar(50)
  joined_at DateTime @default(now()) @db.Timestamptz(6)
  groups    groups   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, group_id])
}
