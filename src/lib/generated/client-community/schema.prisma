generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client-community"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DIRECT_URL_COMMUNITY")
  schemas  = ["community", "user_d"]
}

model communities {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @db.VarChar(100)
  description              String?
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  updated_at               DateTime                   @default(now()) @db.Timestamp(6)
  community_members        community_members[]
  community_posts_metadata community_posts_metadata[]

  @@schema("community")
}

model community_members {
  community_id String      @db.Uuid
  user_id      String      @db.Uuid
  role         String?     @default("member") @db.VarChar(20)
  joined_at    DateTime    @default(now()) @db.Timestamp(6)
  communities  communities @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([community_id, user_id])
  @@schema("community")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model community_posts_metadata {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  community_id String      @db.Uuid
  user_id      String      @db.Uuid
  title        String?     @db.VarChar(255)
  summary      String?
  post_type    String?     @db.VarChar(20)
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  communities  communities @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("community")
}

model password_reset_tokens {
  token      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  used       Boolean? @default(false)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_analytics {
  user_id         String    @id @db.Uuid
  posts_count     Int?      @default(0)
  likes_received  Int?      @default(0)
  followers_count Int?      @default(0)
  following_count Int?      @default(0)
  last_login      DateTime? @db.Timestamp(6)
  activity_score  Decimal?  @default(0.00) @db.Decimal(5, 2)
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_audit_logs {
  audit_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?  @db.Uuid
  action_type  String
  details      Json?    @default("{}")
  performed_by String?  @db.Uuid
  event_time   DateTime @default(now()) @db.Timestamp(6)
  users        users?   @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@schema("user_d")
}

model user_blocklist {
  block_id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                             String?  @unique @db.Uuid
  reason                              String
  blocked_at                          DateTime @default(now()) @db.Timestamp(6)
  users_user_blocklist_user_idTousers users?   @relation("user_blocklist_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_certificates {
  user_id     String   @id @db.Uuid
  public_key  String
  certificate String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_profile {
  user_id      String    @id @db.Uuid
  username     String    @unique
  display_name String?
  bio          String?
  avatar_url   String?
  website      String?
  social_links Json?     @default("{}")
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  dob          DateTime? @db.Date
  country      String?
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_security {
  user_id           String    @id @db.Uuid
  failed_attempts   Int?      @default(0)
  last_failed_login DateTime? @db.Timestamp(6)
  otp_code          String?
  otp_expires_at    DateTime? @db.Timestamp(6)
  recovery_codes    String[]
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model user_sessions {
  session_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  token      String
  created_at DateTime @default(now()) @db.Timestamp(6)
  is_revoked Boolean? @default(false)
  secret     String?
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("user_d")
}

model users {
  id                                           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                        String                  @unique
  phone                                        String?                 @unique
  password_hash                                String
  created_at                                   DateTime                @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime                @default(now()) @db.Timestamp(6)
  is_verified                                  Boolean?                @default(false)
  is_active                                    Boolean?                @default(true)
  pass_salts                                   String?
  user_type                                    String?                 @default("user")
  intitial_balance                             Float                   @default(50000) @db.Real
  password_reset_tokens                        password_reset_tokens[]
  user_analytics                               user_analytics?
  user_audit_logs                              user_audit_logs[]
  user_blocklist_user_blocklist_user_idTousers user_blocklist?         @relation("user_blocklist_user_idTousers")
  user_certificates                            user_certificates?
  user_profile                                 user_profile?
  user_security                                user_security?
  user_sessions                                user_sessions[]

  @@schema("user_d")
}
