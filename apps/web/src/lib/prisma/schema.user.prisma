generator client {
  provider = "prisma-client-js"
  output   = "../../generated/user"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_DB_USER")
}

model user_about {
  about_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @unique @db.Uuid
  about      String?
  goals      String?
  skills     String[] @default([])
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_analytics {
  user_id         String    @id @db.Uuid
  posts_count     Int?      @default(0)
  likes_received  Int?      @default(0)
  followers_count Int?      @default(0)
  following_count Int?      @default(0)
  last_login      DateTime? @db.Timestamp(6)
  activity_score  Decimal?  @default(0.00) @db.Decimal(5, 2)
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_audit_logs {
  audit_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?  @db.Uuid
  action_type  String
  details      Json?    @default("{}")
  performed_by String?  @db.Uuid
  event_time   DateTime @default(now()) @db.Timestamp(6)
  users        users?   @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model user_blocklist {
  block_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @unique @db.Uuid
  reason     String
  blocked_at DateTime @default(now()) @db.Timestamp(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_certificates {
  user_id     String   @id @db.Uuid
  public_key  String
  certificate String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_profile {
  user_id      String    @id @db.Uuid
  username     String    @unique
  display_name String?
  bio          String?
  avatar_url   String?
  website      String?
  social_links Json?     @default("{}")
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  dob          DateTime? @db.Date
  country      String?
  banner_url   String?
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_security {
  user_id           String    @id @db.Uuid
  failed_attempts   Int?      @default(0)
  last_failed_login DateTime? @db.Timestamp(6)
  otp_code          String?
  otp_expires_at    DateTime? @db.Timestamp(6)
  recovery_codes    String[]
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_sessions {
  session_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  token      String
  created_at DateTime @default(now()) @db.Timestamp(6)
  is_revoked Boolean? @default(false)
  secret     String?
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                  @unique
  phone                 String?                 @unique
  password_hash         String
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  is_verified           Boolean?                @default(false)
  is_active             Boolean?                @default(true)
  pass_salts            String?
  user_type             String?                 @default("user")
  intitial_balance      Float                   @default(50000) @db.Real
  user_about            user_about?
  user_analytics        user_analytics?
  user_audit_logs       user_audit_logs[]
  user_blocklist        user_blocklist?
  user_certificates     user_certificates?
  user_profile          user_profile?
  user_security         user_security?
  user_sessions         user_sessions[]
}
