generator client {
  provider = "prisma-client-js"
  output   = "../../generated/community"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_DB_COMMUNITY")
}

model communities {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @db.VarChar(100)
  description              String?
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  updated_at               DateTime                   @default(now()) @db.Timestamp(6)
  community_members        community_members[]
  community_posts_metadata community_posts_metadata[]
}

model community_members {
  community_id String      @db.Uuid
  user_id      String      @db.Uuid
  role         String?     @default("member") @db.VarChar(20)
  joined_at    DateTime    @default(now()) @db.Timestamp(6)
  communities  communities @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([community_id, user_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model community_posts_metadata {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  community_id String      @db.Uuid
  user_id      String      @db.Uuid
  title        String?     @db.VarChar(255)
  summary      String?
  post_type    String?     @db.VarChar(20)
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  communities  communities @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
